// Prisma schema with camel case model keys and @map for snake case in database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(uuid())
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  email     String    @unique
  password  String
  salt      String
  userType  UserType  @default(USER) @map("user_type")
  joinDate  DateTime  @default(now()) @map("join_date")
  lastLogin DateTime? @map("last_login")
  isActive  Boolean   @default(true) @map("is_active")
  isDeleted Boolean   @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  todos     Todo[]

  @@map("users")
}

enum UserType {
  ADMIN
  USER
}

model Todo {
  id           Int       @id @default(autoincrement())
  uuid         String    @unique @default(uuid())
  title        String
  description  String?
  completed    Boolean   @default(false)
  dueDate      DateTime  @default(now()) @map("due_date")
  userUuid     String    @map("user_uuid")
  categoryUuid String?   @map("category_uuid")
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  user         User      @relation(fields: [userUuid], references: [uuid])
  category     Category? @relation(fields: [categoryUuid], references: [uuid])
  tags         TodoTag[]

  @@map("todos")
}

model Category {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid())
  name        String    @unique
  description String?
  isDeleted   Boolean   @default(false) @map("is_deleted")
  deletedAt   DateTime? @map("deleted_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  todos       Todo[]

  @@map("categories")
}

model Tag {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(uuid())
  name      String    @unique
  isDeleted Boolean   @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  todoTags  TodoTag[]

  @@map("tags")
}

model TodoTag {
  todoId    Int      @map("todo_id")
  tagId     Int      @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  todo      Todo     @relation(fields: [todoId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@id([todoId, tagId]) // Composite primary key
  @@map("todo_tags")
}
